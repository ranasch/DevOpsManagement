name: NetCore-CI-CD-DevOpsAutomation

trigger:
  batch: true
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - /Deploy/*
    - Readme.md

variables:
  - group: azdo-dev
  - name: azureSubscription 
    value: 'DevStageServiceConnection'
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build Debug
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output_debug --configuration Debug        
    - task: DotNetCoreCLI@2
      displayName: Build Release
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output_release --configuration Release
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'
        projects: '$(workingDirectory)/DevOpsManagement.Test/*.csproj'
        testRunTitle: 'Unit tests'
    - task: ArchiveFiles@2
      displayName: 'Archive Debug files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output_debug'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).debug.zip
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: 'Archive Release files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output_release'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).release.zip
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Dev
  lockBehavior: sequential
  variables:
    - group: azdo-dev
  displayName: Deploy stage
  dependsOn: Build
  condition: and(succeeded('Build'), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: azdo-dev
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions debug app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).debug.zip'
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: $(functionAppName)
              resourceGroupName: '$(resourceGroupName)'
              appSettings: |
                [
                  {
                    "name": "PAT",
                    "value": "@Microsoft.KeyVault(SecretUri=https://$(keyVaultName).vault.azure.net/secrets/PAT)",
                    "slotSetting": false
                  },
                  {
                    "name": "AzureWebJobsStorage",
                    "value": "@Microsoft.KeyVault(SecretUri=https://$(keyVaultName).vault.azure.net/secrets/WebJobStorage)", 
                    "slotSetting": false
                  },
                  {
                    "name": "VSTSApiVersion",
                    "value": "7.0",
                    "slotSetting": false
                  },
                  {
                    "name": "FUNCTIONS_EXTENSION_VERSION",
                    "value": "~4",
                    "slotSetting": false
                  },
                  {
                    "name": "VSTSOrganization",
                    "value": "$(VSTSOrganization)",
                    "slotSetting": false
                  },
                  {
                    "name": "MANAGEMENT_PROJECT_NAME",
                    "value": "$(MANAGEMENT_PROJECT_NAME)",
                    "slotSetting": false
                  },
                  {
                    "name": "MANAGEMENT_PROJECT_TEAM_NAME",
                    "value": "$(MANAGEMENT_PROJECT_TEAM_NAME)",
                    "slotSetting": false
                  },
                  {
                    "name": "Environments",
                    "value": "dev,test,prod",
                    "slotSetting": false
                  },
                  {
                    "name": "PROCESS_TEMPLATE_ID",
                    "value": "$(PROCESS_TEMPLATE_ID)",
                    "slotSetting": false
                  }
                ]

- stage: Test
  lockBehavior: runLatest
  variables:
    - group: azdo-test
  displayName: Deploy test stage
  dependsOn: Dev
  condition: and(succeeded('Dev'), eq(variables['Build.SourceBranchName'], 'master'), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: azdo-test
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions release app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).release.zip'
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: $(functionAppName)
              resourceGroupName: '$(resourceGroupName)'
              appSettings: |
                [
                  {
                    "name": "PAT",
                    "value": "@Microsoft.KeyVault(SecretUri=https://$(keyVaultName).vault.azure.net/secrets/PAT)",
                    "slotSetting": false
                  },
                  {
                    "name": "AzureWebJobsStorage",
                    "value": "@Microsoft.KeyVault(SecretUri=https://$(keyVaultName).vault.azure.net/secrets/WebJobStorage)", 
                    "slotSetting": false
                  },
                  {
                    "name": "VSTSApiVersion",
                    "value": "7.0",
                    "slotSetting": false
                  },
                  {
                    "name": "FUNCTIONS_EXTENSION_VERSION",
                    "value": "~4",
                    "slotSetting": false
                  },
                  {
                    "name": "VSTSOrganization",
                    "value": "$(VSTSOrganization)",
                    "slotSetting": false
                  },
                  {
                    "name": "MANAGEMENT_PROJECT_NAME",
                    "value": "$(MANAGEMENT_PROJECT_NAME)",
                    "slotSetting": false
                  },
                  {
                    "name": "MANAGEMENT_PROJECT_TEAM_NAME",
                    "value": "$(MANAGEMENT_PROJECT_TEAM_NAME)",
                    "slotSetting": false
                  },
                  {
                    "name": "Environments",
                    "value": "dev,test,prod",
                    "slotSetting": false
                  },
                  {
                    "name": "ProcessTemplateId",
                    "value": "$(PROCESS_TEMPLATE_ID)",
                    "slotSetting": false
                  }
                ]
