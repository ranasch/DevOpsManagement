parameters:
  stage: ""
  serviceConnection: ""
  subscriptionId: ""
  resourceGroup: ""
  location: ""
  appmanagedIdentity: ""
  mode: ""
  resourcePrefix: ""
  library: ""

jobs:
  - deployment: deploy_devopsAutomation_${{ parameters.stage }}
    displayName: azdo Azure Infrastructure deployment 
    variables:
      - group: ${{ parameters.library }}
      - name: appInsights
        value: ${{ parameters.resourcePrefix }}ai-$(env)
      - name: kvName
        value: ${{ parameters.resourcePrefix }}-$(env)
      - name: storageName
        value: ${{ parameters.resourcePrefix }}stor$(env)
      - name: functionName
        value: ${{ parameters.resourcePrefix }}function-$(env)
      - name: vmImageName
        value: 'ubuntu-latest'
    pool:
      vmImage: $(vmImageName)
    environment: azdo-${{ parameters.stage }}
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: devopsAutomationArtifacts

            - template: deploystorage.infra.yml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}
                subscriptionId: ${{ parameters.subscriptionId }}
                resourceGroup: ${{ parameters.resourceGroup }}
                location: ${{ parameters.location }}
                mode: ${{ parameters.mode }}
                name: $(storageName)
                armtemplate: $(Pipeline.Workspace)/devopsAutomationArtifacts/Deploy/ArmTemplates/storage.template.json
                stage: $(env)

            - template: deployinsights.infra.yml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}
                subscriptionId: ${{ parameters.subscriptionId }}
                resourceGroup: ${{ parameters.resourceGroup }}
                location: ${{ parameters.location }}
                mode: ${{ parameters.mode }}
                name: $(appInsights)
                armtemplate: $(Pipeline.Workspace)/devopsAutomationArtifacts/Deploy/ArmTemplates/insights.template.json
                stage: $(env)            

            - template: deployfunction.infra.yml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}
                subscriptionId: ${{ parameters.subscriptionId }}
                resourceGroup: ${{ parameters.resourceGroup }}
                location: ${{ parameters.location }}
                mode: ${{ parameters.mode }}
                name: $(functionName)
                storagename: $(storageName)
                appinsightsname: $(appInsights)
                armtemplate: $(Pipeline.Workspace)/devopsAutomationArtifacts/Deploy/ArmTemplates/functionapp.template.json
                stage: $(env)

            - task: AzureCLI@2
              displayName: "Get Function Managed Identity for KeyVault"
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: "pscore"
                scriptLocation: "inlineScript"
                inlineScript: |
                  echo "*** Get Managed Identity for $(functionName) ***"          
                  $functionmi=az functionapp identity show -g ${{ parameters.resourceGroup }} -n $(functionName) --query principalId
                  echo "##vso[task.setvariable variable=AzureFunctionManagedIdentity;]$functionmi"

            - template: deploykeyvault.infra.yml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}
                subscriptionId: ${{ parameters.subscriptionId }}
                resourceGroup: ${{ parameters.resourceGroup }}
                location: ${{ parameters.location }}
                mode: ${{ parameters.mode }}
                name: $(kvName)
                appmanagedIdentity: $(AzureFunctionManagedIdentity)
                armtemplate: $(Pipeline.Workspace)/devopsAutomationArtifacts/Deploy/ArmTemplates/keyVault.template.json
                stage: $(env)
                 
            - task: AzureCLI@2
              displayName: "Add Secrets to KeyVault"
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: "pscore"
                scriptLocation: "inlineScript"
                inlineScript: |
                  echo "Grant access"
                  $sp=az account show --query user.name
                  $principalObjectId=az ad sp show --id $sp --query id
                  az keyvault set-policy -n $(kvName) --secret-permissions get set --object-id $principalObjectId
                  
                  echo Add secrets
                  $storageConnectionString=az storage account show-connection-string --name $(storageName) --query connectionString
                  $currentConnectionString=az keyvault secret show --vault-name $(kvName) --name "WebJobStorage" --query value -o tsv
                  if($currentConnectionString -ne $storageConnectionString) {
                    az keyvault secret set --vault-name "$(kvName)" --name "WebJobStorage" --value "$storageConnectionString"
                  }
                  $currentPAT=az keyvault secret show --vault-name "$(kvName)" --name "PAT" --query value -o tsv
                  if($currentPAT -ne "$(PAT)") {
                    az keyvault secret set --vault-name "$(kvName)" --name "PAT" --value "$(PAT)"
                  }

                  echo "Remove access"
                  az keyvault delete-policy -n $(kvName) --object-id $principalObjectId

                  echo "Provide Access key"
                  $storageAccountKey1=az storage account keys list -n $(storageName) --query [0].value
                  echo "##vso[task.setvariable variable=StorageAccountKey;isSecret]$storageAccountKey1"

            - template: deploylogicapp.infra.yml
              parameters:
                serviceConnection: ${{ parameters.serviceConnection }}
                subscriptionId: ${{ parameters.subscriptionId }}
                resourceGroup: ${{ parameters.resourceGroup }}
                location: ${{ parameters.location }}
                mode: ${{ parameters.mode }}
                devopsorga: "$(VSTSOrganization)"
                creationproject: "$(MANAGEMENT_PROJECT_NAME)"
                creationteam: "$(MANAGEMENT_PROJECT_TEAM_NAME)"
                storageaccountname: "$(storageName)"
                armtemplate: $(Pipeline.Workspace)/devopsAutomationArtifacts/Deploy/ArmTemplates/logicapp.template.json
                stage: $(env)
                resourcePrefix: ${{ parameters.resourcePrefix }}

